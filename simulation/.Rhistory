}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 7, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
View(results)
save(file = M+"_adjusted_stage2.RData")
save(file = paste0(M,"_adjusted_stage2.RData"))
load("C:/Users/ad6557/Desktop/Rotation/Hyung Park/Two-stage-Bayesian-ATE/simulation/10_adjusted_stage2.RData")
load("C:/Users/ad6557/Desktop/Rotation/Hyung Park/Two-stage-Bayesian-ATE/simulation/10_adjusted_stage2.RData")
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
save.image(file = paste0(M,"_adjusted_stage2.RData"))
load("C:/Users/ad6557/Desktop/Rotation/Hyung Park/Two-stage-Bayesian-ATE/simulation/5_adjusted_stage2.RData")
View(results)
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
save.image(file = paste0(M,"_adjusted_stage2.RData"))
View(results)
mean(results$BPSAcoverage)
mean(results$PSAcoverage)
mean(abs(results$trueATE-results$BayesATE))
mean(abs(results$trueATE-results$FreqATE))
load("C:/Users/ad6557/Desktop/Rotation/Hyung Park/Two-stage-Bayesian-ATE/simulation/M100p5_adjusted_s2.RData")
View(results)
mean(results$BPSAcoverage)
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
mean(results$BPSAcoverage)
mean(results$PSAcoverage)
mean(abs(results$trueATE-results$BayesATE))
mean(abs(results$trueATE-results$FreqATE))
save.image(file = paste0("M",M,"p",p,"_adjusted_s2_flatprior.RData"))
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
mean(results$BPSAcoverage)
mean(results$PSAcoverage)
mean(abs(results$trueATE-results$BayesATE))
mean(abs(results$trueATE-results$FreqATE))
View(results)
#save.image(file = paste0("M",M,"p",p,"_adjusted_s2_flatprior.RData"))
save.image(file = paste0("M",M,"p",p,"_unadjust_s2_flatprior.RData"))
source("risk.data.generation.R")
beta0 = matrix(c(0.1,seq(0.2,1,length=p)),nrow=1) #covariates for PS model
p = 2
beta0 = matrix(c(0.1,seq(0.2,1,length=p)),nrow=1) #covariates for PS model
beta1 = matrix(c(0.3,c(-0.8,-0.5,-0.1,0.5,1)),nrow=1)
source("risk.data.generation.R")
source("risk.data.generation.R")
mean(abs(results$trueATE-results$BayesATE))
beta1[1, 1:(1 + p)]
mean(abs(results$trueATE-results$FreqATE))
X %*% t(beta1[1, 1:(1 + p)])
X %*% beta1[1, 1:(1 + p)]
p = 5
beta0 = matrix(c(0.1,seq(0.2,1,length=p)),nrow=1) #covariates for PS model
beta1 = matrix(c(0.3,c(-0.8,-0.5,-0.1,0.5,1)),nrow=1)
D = diag(rep(1,p)) #correlation matrix for covaritates: all covariates are independent
sigma = 1 #variance for error term of the outcome model
###draw covariates from a multivariate normal distribution
X = matrix( mvrnorm(n,mu=rep(0,p),Sigma=D), ncol = p)
X = cbind(rep(1,n),X) #intercept
#Treatment drawn based on a Bernoulli with probability = 0.5
treatmentmatrix = matrix(rbinom(n,1,0.5),nrow=n,ncol=1)
treatments[,m] = treatmentmatrix
###continuous outcome simulation
error = rnorm(n,0,sigma) #random error term for outcome
outcome = X%*%t(beta0) + X%*%t(beta1)*treatmentmatrix + error
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
View(results)
source("risk.data.generation.R")
source("risk.designfunction.R")
source("risk.analysisfunction.R")
rubinse = function(ates,sigmas){
K = length(ates)
sqrt(mean(sigmas^2,na.rm=TRUE) + var(ates,na.rm=TRUE))
}
bayes.output = function(stratATE,stratSE){
BPSA.ATE = mean(stratATE,na.rm=TRUE)
BPSA.SE = rubinse(stratATE,stratSE)
BPSA.lower = BPSA.ATE - 1.96*BPSA.SE
BPSA.upper = BPSA.ATE + 1.96*BPSA.SE
#cat("BPSA: ",round(BPSA.ATE,3), "(", round(BPSA.lower,3), ",", round(BPSA.upper,3), ")\n")
return(c(BPSA.lower,BPSA.upper,BPSA.ATE,BPSA.SE))
}
freq.output = function(PSA.ate,PSA.se){
PSA.lower = PSA.ate - 1.96*PSA.se
PSA.upper = PSA.ate + 1.96*PSA.se
#cat("PSA: ",round(PSA.ate,3), "(", round(PSA.lower,3), ",", round(PSA.upper,3), ")\n")
return(c(PSA.lower,PSA.upper))
}
library(dplyr)
#coverage_BPSA=rep(NA,M)
#coverage_PSA=rep(NA,M)
results=data.frame(matrix(ncol = 11, nrow = M))
colnames(results)=c("trueATE",
"BayesATE", "BayesSE", "BayesCI1", "BayesCI2", "BPSAcoverage",
"FreqATE", "FreqSE", "FreqCI1", "FreqCI2", "PSAcoverage")
for(m in 1:M){
outcome=continuousdata[[m]][["outcome"]]
treatment=continuousdata[[m]][["treatment"]]
covardataset=continuousdata[[m]][["covariates"]]
trueATE=continuousdata[[m]][["benefitATE"]]
cat(m, "\n")
#cat("true ATE: ", trueATE, "\n")
############ BPSA ##############
K=50
BPSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=TRUE,K=K)
stratATE = rep(NA,K)
stratSE = rep(NA,K)
for(k in 1:K){
strat = PS.analysis(BPSA.est.PS[,k],treatment,outcome,covardataset,bpsa=2,S=1000)
stratATE[k] = strat$ATE
stratSE[k] = strat[["Average SE"]]
}
CI=bayes.output(stratATE,stratSE)
coverage_BPSA=between(trueATE,CI[1],CI[2])
results[m,1:6]=data.frame(trueATE,CI[3],CI[4],CI[1],CI[2],coverage_BPSA)
############ PSA ##############
PSA.est.PS = PS.design(outcome,treatment,covardataset,bayes=FALSE)
strat = PS.analysis(PSA.est.PS,treatment,outcome,covardataset,bpsa = 1)
PSA.ate = mean(strat$ATE)
PSA.se = strat[["Average SE"]]
CI=freq.output(PSA.ate,PSA.se)
coverage_PSA=between(trueATE,CI[1],CI[2])
results[m,7:11]=data.frame(PSA.ate,PSA.se,CI[1],CI[2],coverage_PSA)
#cat("\n")
}
mean(results$BPSAcoverage)
mean(results$PSAcoverage)
mean(abs(results$trueATE-results$BayesATE))
mean(abs(results$trueATE-results$FreqATE))
#save.image(file = paste0("M",M,"p",p,"_adjusted_s2_flatprior.RData"))
save.image(file = paste0("M",M,"p",p,"_unadjust_s2.RData"))
